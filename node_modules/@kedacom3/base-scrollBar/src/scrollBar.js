/**
 * @description
 *  scrollBar组件功能
 *  jquery: jquery.js v1.12.4
 *  jquery.mousewheel: jquery.mousewheel.js
 *  mCustomScrollbar: jquery.mCustomScrollbar.js v3.0.2
 * {@link http://localhost:3000/demo/scrollBar/index.html|Demo}
 * @author 梅皓
 * @date 2019-01-16
 * @example
 *  使用方法：
 *      var scrollBar = Mo.ScrollBar("#scrollContent", {
        setLeft: 0,
        setTop: 0,
        axis: "yx",
        callbacks: {
            onScrollStart: function(e) {
                // TODO
            },
            onScroll: function(e) {
                // TODO
            },
            onScrollEnd: function(e) {
                // TODO
            }
        }
    });
 * @class Menu
 * @property {*} id 元素对象、#id .class
 * @property {object} [config] ScrollBar的配置
 * @property {string} [config.axis] 滚动条支持方向，可选x、y、yx
 * @property {number} [config.setLeft] 滚动条初始x轴位置
 * @property {number} [config.setTop] 滚动条初始y轴位置
 * @property {object} [config.advanced] 高级配置
 * @property {function} [config.advanced.updateOnBrowserResize] 滚动条组件是否在窗口大小改变后自动更新（仅对非webkit浏览器有效）
 * @property {function} [config.advanced.updateOnContentResize] 滚动条组件是否在内容改变影响到大小后自动更新（仅对非webkit浏览器有效）
 * @property {function} [config.advanced.updateOnImageLoad] 滚动条组件是否在内部图片加载完成后自动更新（仅对非webkit浏览器有效）
 * @property {string} config.callbacks 滚动触发方法设定
 * @property {string} config.callbacks.onScrollStart 滚动条开始滚动事件
 * @property {string} config.callbacks.onScroll 滚动条滚动时事件（仅对webkit浏览器有效）
 * @property {string} config.callbacks.onScrollEnd 滚动条滚动停止事件
 *
 */
import '@kedacom3/base-common'; //即使直接用不到也要引入base包 压缩版中只会有必要的CSS
import { CONSTANT, Base, commFn } from '@kedacom3/base-common';
class scrollBar extends Base{
    constructor(id, config = {}) {
        super();
        if(id == "" || typeof id == CONSTANT.ISUNDEFINED){
            console.error("Scrollbar组件初始化时，缺少实例ID")
            return false;
        }
        this.LATENCY = 300;
        this.el = $(id);
        CONSTANT.BAR_VERTICAL= {
            offset: 'offsetHeight',
            scroll: 'scrollTop',
            scrollSize: 'scrollHeight',
            size: 'height',
            key: 'vertical',
            axis: 'Y',
            client: 'clientY',
            direction: 'top'
        };
        CONSTANT.BAR_HORIZONTAL= {
            offset: 'offsetWidth',
            scroll: 'scrollLeft',
            scrollSize: 'scrollWidth',
            size: 'width',
            key: 'horizontal',
            axis: 'X',
            client: 'clientX',
            direction: 'left'
        };
        this.config = $.extend(true,{
            //width: "100%",
            //height: "100%",
            axis: "yx",
            callbacks:{
                onScrollStart: function(){},
                onScroll: function(){},
                onScrollEnd: function(){}
            }
        },config);
        this["X"] = 0;
        this["Y"] = 0;
        this.bar = {};
        this.scrollStart = false;
        this._init();
        this._initEvent();
    }
    _init() {
        var wrapper = `<div class="base-scrollbar base-scrollbar_nav"><div class="base-scrollbar_wrap"><div class="base-scrollbar_view"></div></div></div>`;
        var scrollbar = `${this.config.axis.indexOf("x") >= 0 ? `<div class="base-scrollbar_bar base-scrollbar-horizontal" dir="horizontal"><div class="base-scrollbar_thumb" dir="horizontal"></div></div>` : ``}${this.config.axis.indexOf("y") >= 0 ? `<div class="base-scrollbar_bar base-scrollbar-vertical" dir="vertical"><div class="base-scrollbar_thumb" dir="vertical"></div></div>` : ``}`;
        this.el.wrapInner(wrapper);
        this.scrollContent = $(".base-scrollbar_nav", this.el);
        this.scrollContent.append(scrollbar);
        this.$refs = {
            bar: $(".base-scrollbar_bar", this.scrollContent),
            wrap: $(".base-scrollbar_wrap", this.scrollContent),
            view: $(".base-scrollbar_view", this.scrollContent),
            thumb: $(".base-scrollbar_thumb", this.scrollContent)
        };
    }
    _initEvent() {
        var that = this;
        this._createJqueryScroll();
        this.$refs.bar.on("mousedown", that._clickTrackHandler(that));
        this.$refs.thumb.on("mousedown", that._clickThumbHandler(that));
        this.$refs.wrap.off("scroll").on("scroll", function(e){
            if (that.scrollStart) {
                that.config.callbacks.onScroll(e);
            }
            that._initThumbResize();
        }).off("scrollstart").on("scrollstart", function(e){
            that.scrollStart = true;
            that.config.callbacks.onScrollStart(e);
        }).off("scrollend").on("scrollend", function(e){
            that.scrollStart = false;
            that.config.callbacks.onScrollEnd(e);
        });
        this._initThumbResize();
        $(window).on("resize", function() {
            that._initThumbResize();
        });
    }
    _clickTrackHandler(that) {
        function handler(e) {
            var $el = that.scrollContent[0];
            var wrap = that.$refs.wrap[0];

            var dir = e.target.getAttribute("dir");
            that.bar = CONSTANT["BAR_" + dir.toUpperCase()];
            var thumb = $(e.target).find(".base-scrollbar_thumb")[0];
            var offset = Math.abs(e.target.getBoundingClientRect()[that.bar.direction] - e[that.bar.client]);
            var thumbHalf = thumb[that.bar.offset] / 2;
            var thumbPositionPercentage = (offset - thumbHalf) * 100 / $el[that.bar.offset];
            wrap[that.bar.scroll] = thumbPositionPercentage * wrap[that.bar.scrollSize] / 100;
            //that._initThumbResize(that.bar.key);
        }

        return handler;
    }
    _clickThumbHandler(that) {
        function handler(e) {
            // 防止右键事件
            if (e.ctrlKey || e.button === 2) {
                return;
            }
            var dir = e.target.getAttribute("dir");
            that.bar = CONSTANT["BAR_" + dir.toUpperCase()];
            that._startDrag(e);
            that[that.bar.axis] = e.currentTarget[that.bar.offset] - (e[that.bar.client] - e.currentTarget.getBoundingClientRect()[that.bar.direction]);
        }

        return handler;
    }
    _startDrag(e) {
        e.stopImmediatePropagation();
        this.cursorDown = true;

        $(document).on("mousemove.movehandler", this._mouseMoveDocumentHandler(this));
        $(document).on("mouseup.uphandler", this._mouseUpDocumentHandler(this));
        document.onselectstart = () => false;
    }
    _mouseMoveDocumentHandler(that) {
        function handler(e) {
            var $el = $(".base-scrollbar-" + that.bar.key, that.scrollContent)[0];
            var wrap = that.$refs.wrap[0];
            var view = that.$refs.view[0];

            if (that.cursorDown === false) return;
            var prevPage = that[that.bar.axis];
            if (!prevPage) return;
            var offset = ($el.getBoundingClientRect()[that.bar.direction] - e[that.bar.client]) * -1;
            var thumb = $(".base-scrollbar-" + that.bar.key + " .base-scrollbar_thumb")[0];
            var thumbClickPosition = thumb[that.bar.offset] - prevPage;
            var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / $el[that.bar.offset];
            wrap[that.bar.scroll] = thumbPositionPercentage * view[that.bar.offset] / 100;
            that._initThumbResize(that.bar.key);
        }
        return handler;
    }
    _mouseUpDocumentHandler(that) {
        function handler(e) {
            that.cursorDown = false;
            that[that.bar.axis] = 0;
            $(document).off("mousemove.movehandler");
            setTimeout(function () {
                $(document).off("mouseup.uphandler");
            }, 10);
            document.onselectstart = null;
        }
        return handler;
    }
    _initThumbResize(dir) {
        if (dir) {
            this._resizeThumb(dir);
        } else {
            this._resizeThumb("vertical");
            this._resizeThumb("horizontal");
        }
    }
    _resizeThumb(dir) {
        var wrap = this.$refs.wrap[0];
        var move = 0;
        var size = 0;
        if (dir == "horizontal") {
            move = wrap.scrollLeft * 100 / wrap.clientWidth;
            var percentage = wrap.clientWidth * 100 / wrap.scrollWidth;
            size = percentage < 100 ? (percentage + "%") : "";
            var translate = `translateX(${move}%)`;

            $(".base-scrollbar-horizontal .base-scrollbar_thumb", this.scrollContent).css("width", size).css("transform", translate).css("msTransform", translate).css("webkitTransform", translate);
        } else if (dir == "vertical") {
            move = wrap.scrollTop * 100 / wrap.clientHeight;
            var percentage = wrap.clientHeight * 100 / wrap.scrollHeight;
            size = percentage < 100 ? (percentage + "%") : "";
            var translate = `translateY(${move}%)`;

            $(".base-scrollbar-vertical .base-scrollbar_thumb", this.scrollContent).css("height", size).css("transform", translate).css("msTransform", translate).css("webkitTransform", translate);
        }
    }
    _scrollTo(position) {
        if (typeof position == CONSTANT.ISSTRING) {
            switch (position) {
                case CONSTANT.SCROLLTOP:
                    this.$refs.wrap[0].scrollTop = 0;
                    break;
                case CONSTANT.SCROLLLEFT:
                    this.$refs.wrap[0].scrollLeft = 0;
                    break;
                case CONSTANT.SCROLLRIGHT:
                    this.$refs.wrap[0].scrollLeft = this.$refs.wrap[0].scrollWidth;
                    break;
                case CONSTANT.SCROLLBOTTOM:
                    this.$refs.wrap[0].scrollTop = this.$refs.wrap[0].scrollHeight;
                    break;
                case CONSTANT.SCROLLLAST:
                    this._scrollToElement($(this.el[0].lastElementChild));
                    break;
                case CONSTANT.SCROLLFIRST:
                    this._scrollToElement($(this.el[0].firstElementChild));
                    break;
            }
        }
        if (typeof position == CONSTANT.ISOBJECT && position.length == 2) {
            if (position[0] || position[0] == 0) {
                this.$refs.wrap[0].scrollLeft = position[0];
            }
            if (position[1] || position[1] == 0) {
                this.$refs.wrap[0].scrollTop = position[1];
            }
        }
        if ($(position) && $(position).length !== 0) {
            this._scrollToElement($(position));
        }
    }
    _scrollToElement($el) {
        if ($el.offset && $el.offset()) {
            var top = $el.offset().top - this.el[0].getBoundingClientRect().top;
            var left = $el.offset().left - this.el[0].getBoundingClientRect().left;
            this.$refs.wrap[0].scrollTop = top;
            this.$refs.wrap[0].scrollLeft = left;
        }
    }
    _createJqueryScroll() {
        var special = jQuery.event.special,
            uid1 = 'D' + (+new Date()),
            uid2 = 'D' + (+new Date() + 1);
        var that = this;
        special.scrollstart = {
            setup: function() {

                var timer,
                    handler =  function(evt) {
                        var _self = this,
                            _args = arguments;

                        if (timer) {
                            clearTimeout(timer);
                        } else {
                            evt.type = 'scrollstart';
                            jQuery.event.dispatch.apply(_self, _args);
                        }

                        timer = setTimeout( function(){
                            timer = null;
                        }, special.scrollend.latency);

                    };

                jQuery(this).bind('scroll', handler).data(uid1, handler);

            },
            teardown: function(){
                jQuery(this).unbind('scroll', jQuery(this).data(uid1));
            }
        };

        special.scrollend = {
            latency: that.LATENCY,
            setup: function() {

                var timer,
                    handler = function(evt) {
                        var _self = this,
                            _args = arguments;

                        if (timer) {
                            clearTimeout(timer);
                        }

                        timer = setTimeout( function(){

                            timer = null;
                            evt.type = 'scrollend';
                            jQuery.event.dispatch.apply(_self, _args);

                        }, special.scrollend.latency);

                    };

                jQuery(this).bind('scroll', handler).data(uid2, handler);

            },
            teardown: function() {
                jQuery(this).unbind( 'scroll', jQuery(this).data(uid2) );
            }
        };
    }
    _getPosition() {
        return [this.$refs.wrap[0].scrollLeft, this.$refs.wrap[0].scrollTop];
    }
    /**
     * @description 滚动到指定地点
     * @author 梅皓
     * @example
     *  scrollContent.setPosition({position: [100, 100]})
     * @date 2019-01-15
     * @param {object} param 参数集
     * @param {*} param.position 移动位置 参数可选以下类型
     *                            位置说明 "top", "left", "right", "bottom"
     *                            目标说明 "first", "last"
     *                            自订位置 [100, 200]
     *                            自订目标(支持所有可以被jQuery初始化的内容,建议单一目标) "#scrollObject", $("#scrollObject"), document.getElementById("scrollObject")
     */
    scrollTo(param) {
        this._scrollTo(param);
    }
    /**
     * @description 获取页数 返回结果为[left, top]的正数数组
     * @memberof ScrollBar
     */
    getPosition() {
        return this._getPosition();
    }
}

export default scrollBar;